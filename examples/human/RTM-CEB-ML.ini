######################## For creating scenarios with transient communication outages ##################################
# If a user is interested in creating a dense traffic scenario that induces temporary communication outages
# in a realistic way, they may consider a high number of "humanCars", e.g., 400/500 and 2/3 "humanLanes". 
# Moreover, the users can play with *.human[*].prot.beaconingInterval parameter to create a dense data traffic scenario.
# Alternatively, a large number of platoons driving in e.g., 3 or 4 lanes might be considered. 
##########################################################
[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
#output-scalar-file-append=false
cmdenv-status-frequency = 10s
num-rngs = 6

ned-path = .
network = Highway

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = false
print-undisposed = true
cmdenv-redirect-output = true

*.playgroundSizeX = 65000m
*.playgroundSizeY = 25000m
*.playgroundSizeZ = 50m

sim-time-limit = 50 s

**.debug = false
**.coreDebug = false

##########################################################
# Annotation parameters                                  #
##########################################################
*.annotations.draw = false

##########################################################
# Obstacle parameters                                    #
##########################################################
*.obstacles.debug = false

##########################################################
#            WorldUtility parameters                     #
##########################################################
*.world.useTorus = false
*.world.use2D = false

##########################################################
#            TraCIScenarioManager parameters             #
##########################################################
*.manager.updateInterval = 0.01s
*.manager.host = "localhost"
*.manager.moduleType = "vtypeauto=org.car2x.veins.modules.application.platooning.PlatoonCar vtypehuman=HumanCar"
*.manager.moduleName = "vtypeauto=node vtypehuman=human"
*.manager.moduleDisplayString = ""
*.manager.autoShutdown = true
*.manager.margin = 25

##########################################################
#            11p specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
*.connectionManager.sendDirect = true
*.connectionManager.maxInterfDist = 2600m
*.connectionManager.drawMaxIntfDist = false

*.**.nic.mac1609_4.useServiceChannel = false

*.**.nic.mac1609_4.txPower = 100mW
*.**.nic.mac1609_4.bitrate = 6Mbps

*.**.nic.phy80211p.sensitivity = -94dBm
*.**.nic.phy80211p.maxTXPower = 100mW
*.**.nic.phy80211p.useThermalNoise = true
*.**.nic.phy80211p.thermalNoise = -95dBm
*.**.nic.phy80211p.decider = xmldoc("config.xml")
*.**.nic.phy80211p.analogueModels = xmldoc("config.xml")
*.**.nic.phy80211p.usePropagationDelay = true

##########################################################
#                      Mobility                          #
##########################################################
*.node[*].mobility.x = 0
*.node[*].mobility.y = 0
*.node[*].mobility.z = 1.895
*.human[*].mobility.x = 0
*.human[*].mobility.y = 0
*.human[*].mobility.z = 1.895

##########################################################
#                    Seeds and PRNGs                     #
##########################################################
seed-set = ${repetition}
**.seed = ${repetition}

*.node[*].unicast.rng-0 = 1
*.node[*].prot.rng-0 = 2
*.node[*].appl.rng-0 = 3
*.node[*].scenario.rng-0 = 4
**.traffic.rng-0 = 5

#launch config. tells Veins which SUMO configuration to run
*.manager.configFile = "./sumocfg/freeway.sumo.cfg"
#location of the vehicles parameters file
*.node[*].scenario.vehicleFile = "./sumocfg/vehicles.xml"

##########################################################
#                   Common parameters                    #
##########################################################
#the following parameters are useful for creating a dense traffic scenario
**.numberOfCars = ${nCars = 7}
**.numberOfCarsPerPlatoon = ${platoonSize = 7}
**.numberOfLanes = ${nLanes = 1}
**.numberOfHumanCars = ${humanCars = 4} 
**.numberOfHumanLanes = ${humanLanes = 3} 

##########################################################
#                    Position helper                     #
##########################################################

*.node[*].helper_type = "PositionHelper"
*.node[*].helper.nLanes = ${nLanes}
*.node[*].helper.platoonSize = ${platoonSize}
*.node[*].helper.nCars = ${nCars}

##########################################################
#               Scenario common parameters               #
##########################################################

#controller and engine related parameters
*.node[*].scenario.caccSpacing = ${caccSpacing = 5}m
*.node[*].scenario.caccC1 = 0.5
*.node[*].scenario.caccXi = 1
*.node[*].scenario.caccOmegaN = 0.2 Hz
*.node[*].scenario.engineTau = 0.5 s
*.node[*].scenario.ploegH = ${ploegH = 0.25}s
*.node[*].scenario.ploegKp = 0.2
*.node[*].scenario.ploegKd = 0.7
*.node[*].scenario.useRealisticEngine = false

#RTM starts with PATH CACC, but adopts PLOEG CACC or ACC based on comm. quality
*.node[*].scenario.controller = "CACC"

#ACC headway parameters
**.headway = ${headway = 0.5}s
*.node[*].scenario.accHeadway = ${headway}s
*.node[*].scenario.leaderHeadway = ${leaderHeadway = 1.2}s

#average leader speed
*.node[*].scenario.leaderSpeed = ${leaderSpeed = 100}kmph

##########################################################
#                      Application                       #
##########################################################

*.node[*].appl_type = "SimplePlatooningApp"
#enable statistics recording for the application
*.node[*].appl.*.scalar-recording = true
*.node[*].appl.*.vector-recording = true


##########################################################
#                Communication protocols                 #
##########################################################

*.node[*].protocol_type = "SimplePlatooningBeaconing"
#enable statistics recording for the network layer
*.node[*].prot.*.scalar-recording = true
*.node[*].prot.*.vector-recording = true
#set the beaconing interval to be 0.1s
*.node[*].prot.beaconingInterval = ${beaconInterval = 0.1}s
#access category for platooning beacons
*.node[*].prot.priority = ${priority = 4}
#packet size for platooning beacon
*.node[*].prot.packetSize = ${packetSize = 200}
#Acknowledgement packet size for AEB and CEBP strategies
*.node[*].prot.ackPacketSize = 50
#packet size of the last vehicle's delay packet
*.node[*].prot.delayPktSize = 10
#via wireless send acceleration computed by the controller, not the actual one
*.node[*].prot.useControllerAcceleration = true
#set to 0 the packet loss rate for the unicast protocol
*.node[*].unicast.packetLossRate = 0.0
#set the beaconing interval to be 0.1s
*.human[*].prot.beaconingInterval = 0.02 s
#access category for interfering beacons
*.human[*].prot.priority = 4
#packet size for interfering beacon
*.human[*].prot.packetSize = 200
#tx power for interfering beacon
*.human[*].prot.txPower = 100 mW
#bitrate for interfering beacon
*.human[*].prot.bitrate = 3 Mbps

##########################################################
#                    Traffic manager                     #
##########################################################

**.traffic_type = "PlatoonsPlusHumanTraffic"
#insert platooning vehicles at time
**.traffic.platoonInsertTime = 1 s
#In a dense scenario, if the platoon and human vehicles are inserted at the same time,
#the platoon may not be within the interference range of the maximum number of vehicles.
**.traffic.humanInsertTime = 10 s 
#insert platooning vehicles with a speed of
**.traffic.platoonInsertSpeed = ${leaderSpeed}kmph
#insert nCars platooning vehicles
**.traffic.nCars = ${nCars}
#insert humanCars human vehicles
**.traffic.humanCars = ${humanCars}
#let platoonSize cars per platoon
**.traffic.platoonSize = ${platoonSize}
#use nLanes lanes
**.traffic.nLanes = ${nLanes}
#insert humanLanes lanes to insert human vehicles
**.traffic.humanLanes = ${humanLanes}
#SUMO vtype for platooning vehicles
**.traffic.platooningVType = "vtypeauto"
#SUMO vtype for human vehicles
**.traffic.humanVType = "vtypehuman"
**.traffic.platoonInsertDistance = 5m
**.traffic.platoonInsertHeadway = 0s
**.traffic.platoonLeaderHeadway = ${leaderHeadway}s

#disable statistics recording for all other modules
**.scalar-recording = false
**.vector-recording = false


#The platoon cruises in a sinusoidal fashion with RTM
[Config sinusoidal-RTM]
repeat = 1
*.manager.useGui = true
#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"
#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 10 kmph
*.node[*].scenario.startOscillating = 5 s

*.node[*].runtimeManager.rmEnabled = true

#Cruises in a sinusoidal fashion with RTM and brakes with CEBP
[Config RTM-CEBP]
repeat = 1
*.manager.useGui = true
#use the sinusoidal scenario during cruising
*.node[*].scenario_type = "SinusoidalScenario"
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 10 kmph
*.node[*].scenario.startOscillating = 5 s
#Start braking at 102 s using CEBP 
*.node[*].runtimeManager.rmEnabled = true
#relay the DENMs using the middle vehicle
*.node[*].prot.isRelayEnabled = true 
*.node[*].prot.isCoopEmBrkEnabled = true
*.node[*].prot.isCEBPEnabled = true
*.node[*].prot.decelarationRate = 8 mpsps
*.node[*].prot.brakeAtTime = 40s
*.node[*].prot.speedOfLeader = ${leaderSpeed}kmph
*.node[*].prot.DENMInterval = 0.1s

#Cruises in a sinusoidal fashion with RTM and brakes with AEB
[Config RTM-AEB]
repeat = 1
*.manager.useGui = true
#use the sinusoidal scenario during cruising
*.node[*].scenario_type = "SinusoidalScenario"
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 10 kmph
*.node[*].scenario.startOscillating = 5 s
#Start braking at 102 s using AEB 
*.node[*].runtimeManager.rmEnabled = true
#relay the DENMs using the middle vehicle
*.node[*].prot.isRelayEnabled = true
*.node[*].prot.isCoopEmBrkEnabled = true
*.node[*].prot.isAEBEnabled = true
*.node[*].prot.decelarationRate = 8 mpsps
*.node[*].prot.softDecelRate = 3 mpsps
*.node[*].prot.brakeAtTime = 40s
*.node[*].prot.speedOfLeader = ${leaderSpeed}kmph
*.node[*].prot.DENMInterval = 0.1s

#Cruises in a sinusoidal fashion with RTM and brakes with GD
[Config RTM-GD]
repeat = 1
*.manager.useGui = true
#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 10 kmph
*.node[*].scenario.startOscillating = 5 s
#Start braking at 102 s using GD 
*.node[*].runtimeManager.rmEnabled = true
#relay the DENMs using the middle vehicle
*.node[*].prot.isRelayEnabled = true
*.node[*].prot.isCoopEmBrkEnabled = true
*.node[*].prot.isGDEnabled = true
#set the deceleration rates of the individual vehicles; node 0 is the lead vehicle
*.node[0].prot.decelarationRate = 4.4 mpsps 
*.node[1].prot.decelarationRate = 4.9 mpsps 
*.node[2].prot.decelarationRate = 5.39 mpsps 
*.node[3].prot.decelarationRate = 5.88 mpsps 
*.node[4].prot.decelarationRate = 6.37 mpsps 
*.node[5].prot.decelarationRate = 6.86 mpsps 
*.node[*].prot.decelarationRate = 8 mpsps 
*.node[*].prot.brakeAtTime = 40s
*.node[*].prot.speedOfLeader = ${leaderSpeed}kmph
*.node[*].prot.DENMInterval = 0.1s

#Cruises in a sinusoidal fashion with RTM and brakes with SB. tau_wait is set by the user
[Config RTM-SB]
repeat = 1
*.manager.useGui = true
#use the sinusoidal scenario during cruising
*.node[*].scenario_type = "SinusoidalScenario"
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 10 kmph
*.node[*].scenario.startOscillating = 5 s
#Start braking at 102 s using SB 
*.node[*].runtimeManager.rmEnabled = true
#relay the DENMs using the middle vehicle
*.node[*].prot.isRelayEnabled = true
*.node[*].prot.isCoopEmBrkEnabled = true
*.node[*].prot.isSynchronizedBraking = true
*.node[*].prot.decelarationRate = 8 mpsps
*.node[*].prot.brakeAtTime = 40s
*.node[*].prot.speedOfLeader = ${leaderSpeed}kmph
#Fixed tau_wait time that all the vehicles should pursue before braking
*.node[*].prot.sbWaitTime = ${waitTime=0.5} s
*.node[*].prot.DENMInterval = 0.1s

#Cruises steadily with RTM and brakes with SB.
#tau_wait is calculated by averaging the CAM delays 
[Config RTM-SB-AvgDelay]
repeat = 1
*.manager.useGui = true
*.node[*].scenario_type = "BrakingScenario"
#Braking parameters
*.node[*].runtimeManager.rmEnabled = true
*.node[*].prot.isRelayEnabled = true
*.node[*].prot.isCoopEmBrkEnabled = true
*.node[*].prot.isSynchronizedBraking = true
*.node[*].prot.decelarationRate = 8 mpsps
*.node[*].prot.brakeAtTime = 40s
*.node[*].prot.speedOfLeader = ${leaderSpeed}kmph
*.node[*].prot.DENMInterval = 0.1s
# SB with Avg. CAM delays
*.node[*].prot.isSBwithAvgDelay = true

#Cruises isteadily with RTM and brakes with SB.
#tau_wait is predicted using SVR
[Config RTM-SB-SVR]
repeat = 1
*.manager.useGui = true
*.node[*].scenario_type = "BrakingScenario"
#Braking parameters
*.node[*].runtimeManager.rmEnabled = true
*.node[*].prot.isRelayEnabled = true
*.node[*].prot.isCoopEmBrkEnabled = true
*.node[*].prot.isSynchronizedBraking = true
*.node[*].prot.decelarationRate = 8 mpsps
*.node[*].prot.brakeAtTime = 40s
*.node[*].prot.speedOfLeader = ${leaderSpeed}kmph
*.node[*].prot.DENMInterval = 0.1s
# ML parameters
*.node[*].prot.runSVR = true 
*.node[*].prot.SVRSizeLimit = 5
*.node[*].prot.SVRC = 0.03
*.node[*].prot.SVREpsilon = 0.0001

#Cruises isteadily with RTM and brakes with SB.
#tau_wait is predicted using NN
[Config RTM-SB-NN]
repeat = 1
*.manager.useGui = true
*.node[*].scenario_type = "BrakingScenario"
#Braking parameters
*.node[*].runtimeManager.rmEnabled = true
*.node[*].prot.isRelayEnabled = true
*.node[*].prot.isCoopEmBrkEnabled = true
*.node[*].prot.isSynchronizedBraking = true
*.node[*].prot.decelarationRate = 8 mpsps
*.node[*].prot.brakeAtTime = 40s
*.node[*].prot.speedOfLeader = ${leaderSpeed}kmph
*.node[*].prot.DENMInterval = 0.1s
# ML parameters
*.node[*].prot.runNN = true


#Cruises in a sinusoidal fashion with RTM and brakes with SB.
#tau_wait is predicted using SVR
[Config RTM-SB-SVR-sinusoidal]
repeat = 1
*.manager.useGui = true
#use the sinusoidal scenario during cruising
*.node[*].scenario_type = "SinusoidalScenario"
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 10 kmph
*.node[*].scenario.startOscillating = 5 s
#Braking parameters
*.node[*].runtimeManager.rmEnabled = true
*.node[*].prot.isRelayEnabled = true
*.node[*].prot.isCoopEmBrkEnabled = true
*.node[*].prot.isSynchronizedBraking = true
*.node[*].prot.decelarationRate = 8 mpsps
*.node[*].prot.brakeAtTime = 40s
*.node[*].prot.speedOfLeader = ${leaderSpeed}kmph
*.node[*].prot.DENMInterval = 0.1s
# ML parameters
*.node[*].prot.runSVR = true 
*.node[*].prot.SVRSizeLimit = 5
*.node[*].prot.SVRC = 0.03
*.node[*].prot.SVREpsilon = 0.0001
