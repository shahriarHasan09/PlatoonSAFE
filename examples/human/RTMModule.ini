[General]
# including the main configuration file
include RTM-CEB-ML.ini
##########################################################
#                  RuntimeManager                        #
##########################################################
# Sets whether you want to use the Runtime Manager
*.node[*].runtimeManager.rmEnabled = true
# Instructs Runtime Manager how often a vehicle status to be checked
*.node[*].runtimeManager.rmMonitorInterval	   = 0.1 s
# The interval at which a beacon is expected from the LV or front vehicle
*.node[*].runtimeManager.expectedBeconInterval = ${beaconInterval}s
# Read Contracts from input file, setting readContractsFromInputFile = false will use the DEFAULT Contracts
*.node[*].runtimeManager.readContractsFromInputFile = false
*.node[*].runtimeManager.contractInputFilename      = "/home/aalonso/src/plexe-veins-plexe-2.1/src/veins/modules/application/platooning/runtimeManager/input/contracts.txt"
# Setting write2file = true, will write any safety violation to the output txt file
*.node[*].runtimeManager.outputFilename	= "/home/aalonso/src/plexe-veins-plexe-2.1/src/veins/modules/application/platooning/runtimeManager/output"
*.node[*].runtimeManager.write2file	    = true
#Duration of communication outage; N=2 implies 100 ms ($beaconInterval)*2 = 200 ms outage
*.node[*].runtimeManager.nPacketLossPoor 	 = ${N=2} #regarded as fair in the paper
*.node[*].runtimeManager.nPacketLossCritical = ${M=8} #regarded as poor in the paper 
# transition/action to be taken based on V2V connectivity. Uses the DEFAULT Contracts
# The follwoing three are active only if readContractsFromInputFile = false
*.node[*].runtimeManager.upgradationEnabled = true
*.node[*].runtimeManager.degradationEnabled = true
*.node[*].runtimeManager.gapControlEnabled  = true

# Safety violation check
*.node[*].runtimeManager.minSafetyDistance = 0m
# min and max acceleration can be set as a simulaiton parameter in BBaseScenario.ned file
*.node[*].runtimeManager.maxDeceleration   = -8.0mpsps
# ACC headway to be used in RTM: Set the value $headway in 'Scenario common parameters' part
*.node[*].runtimeManager.accHeadwaytimeGap      = ${headway}s
# PLOEG CACC headway to be used in RTM: Set the value $ploegH in 'Scenario common parameters' part
*.node[*].runtimeManager.ploegHeadwayTimeGap    = ${ploegH}s
#INCREASING the gap: newPloegH = ploegHeadwayTimeGap  + ploegHeadwayTimeGap * emergencyPloegHeadwayTimeGapFactor
*.node[0..4].runtimeManager.emergencyPloegHeadwayTimeGapFactor = 0.1
*.node[*].runtimeManager.emergencyPloegHeadwayTimeGapFactor = 0.25
#PATH CACC CDG to be used in RTM: Set the value $caccSpacing in 'Scenario common parameters' part
*.node[*].runtimeManager.caccConstantSpacing    = ${caccSpacing}m
# INCREASING the gap: newSpacing = caccConstantSpacing + caccConstantSpacing * emergencyCaccConstantSpacingFactor
*.node[0..4].runtimeManager.emergencyCaccConstantSpacingFactor = 0.1
*.node[*].runtimeManager.emergencyCaccConstantSpacingFactor = 0.25