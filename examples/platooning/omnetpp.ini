[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
cmdenv-status-frequency = 10s
num-rngs = 6
#repeat = 2

ned-path = .
network = Highway

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = true
print-undisposed = true

*.playgroundSizeX = 65000m
*.playgroundSizeY = 25000m
*.playgroundSizeZ = 50m

sim-time-limit = 50 s

**.debug = false
**.coreDebug = false

##########################################################
# Annotation parameters                                  #
##########################################################
*.annotations.draw = false
##########################################################
# Obstacle parameters                                    #
##########################################################
*.obstacles.debug = false

##########################################################
#            WorldUtility parameters                     #
##########################################################
*.world.useTorus = false
*.world.use2D = false

##########################################################
#            TraCIScenarioManager parameters             #
##########################################################
*.manager.updateInterval = .01s
*.manager.host = "localhost"
*.manager.moduleType = "org.car2x.veins.modules.application.platooning.PlatoonCar"
*.manager.moduleName = "node"
*.manager.moduleDisplayString = ""
*.manager.autoShutdown = true
*.manager.margin = 25

##########################################################
#            11p specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
*.connectionManager.sendDirect = true
*.connectionManager.maxInterfDist = 2600m
*.connectionManager.drawMaxIntfDist = false

*.**.nic.mac1609_4.useServiceChannel = false

*.**.nic.mac1609_4.txPower = 100mW
*.**.nic.mac1609_4.bitrate = 6Mbps

*.**.nic.phy80211p.sensitivity = -94dBm
*.**.nic.phy80211p.maxTXPower = 100mW
*.**.nic.phy80211p.useThermalNoise = true
*.**.nic.phy80211p.thermalNoise = -95dBm
*.**.nic.phy80211p.decider = xmldoc("config.xml")
*.**.nic.phy80211p.analogueModels = xmldoc("config.xml")
*.**.nic.phy80211p.usePropagationDelay = true

##########################################################
#                      Mobility                          #
##########################################################
*.node[*].mobility.x = 0
*.node[*].mobility.y = 0
*.node[*].mobility.z = 1.895


##########################################################
#                    Seeds and PRNGs                     #
##########################################################
seed-set = ${repetition}
**.seed = ${repetition}

*.node[*].unicast.rng-0 = 1
*.node[*].prot.rng-0 = 2
*.node[*].appl.rng-0 = 3
*.node[*].scenario.rng-0 = 4
**.traffic.rng-0 = 5

#launch config. tells Veins which SUMO configuration to run
*.manager.configFile = "./sumocfg/freeway.sumo.cfg"

##########################################################
#                   Common parameters                    #
##########################################################

**.numberOfCars = ${nCars = 8}
**.numberOfCarsPerPlatoon = ${platoonSize = 8}
**.numberOfLanes = ${nLanes = 1}

##########################################################
#                    Position helper                     #
##########################################################

*.node[*].helper_type = "PositionHelper"
*.node[*].helper.nLanes = ${nLanes}
*.node[*].helper.platoonSize = ${platoonSize}
*.node[*].helper.nCars = ${nCars}

##########################################################
#               Scenario common parameters               #
##########################################################

#controller and engine related parameters
# ahad : caccSpacing
*.node[*].scenario.caccSpacing = ${caccSpacing = 5}m
*.node[*].scenario.caccC1 = 0.5
*.node[*].scenario.caccXi = 1
*.node[*].scenario.caccOmegaN = 0.2 Hz
*.node[*].scenario.engineTau = 0.5 s
*.node[*].scenario.ploegH = ${ploegH = 0.6}s
*.node[*].scenario.ploegKp = 0.2
*.node[*].scenario.ploegKd = 0.7
*.node[*].scenario.useRealisticEngine = false
#via wireless send acceleration computed by the controller, not the actual one
*.node[*].scenario.useControllerAcceleration = true

#controllers to be tested
**.numericController = ${controller = 0, 0, 1, 2, 3, 4}
*.node[*].scenario.controller = ${sController = "ACC", "ACC", "CACC", "PLOEG", "CONSENSUS", "FLATBED" ! controller}

#headway for ACCs
# default
#**.headway = ${headway = 0.3, 1.2, 0.1, 0.1, 0.1, 0.1 ! controller}s

**.headway = ${headway = 0.3, 1.2, 0.1, 0.1, 0.1, 0.1 ! controller}s
*.node[*].scenario.accHeadway = ${headway}s
*.node[*].scenario.leaderHeadway = ${leaderHeadway = 1.2}s

#average leader speed
*.node[*].scenario.leaderSpeed = ${leaderSpeed = 100}kmph

##########################################################
#                      Application                       #
##########################################################

*.node[*].appl_type = "SimplePlatooningApp"
#enable statistics recording for the application
*.node[*].appl.*.scalar-recording = true
*.node[*].appl.*.vector-recording = true


##########################################################
#                Communication protocols                 #
##########################################################

*.node[*].protocol_type = "SimplePlatooningBeaconing"
#enable statistics recording for the network layer
*.node[*].prot.*.scalar-recording = true
*.node[*].prot.*.vector-recording = true
#set the beaconing interval to be 0.1s
*.node[*].prot.beaconingInterval = ${beaconInterval = 0.1}s
#access category for platooning beacons
*.node[*].prot.priority = ${priority = 4}
#packet size for platooning beacon
*.node[*].prot.packetSize = ${packetSize = 200}
#set to 0 the packet loss rate for the unicast protocol
*.node[*].unicast.packetLossRate = 0.60

##########################################################
#                  RuntimeManager                        #
##########################################################

# Sets whether you want to use the Runtime Manager
*.node[*].runtimeManager.rmEnabled			   = true
# This parameter tell Runtime Manager how often to check the status of a vehicle
*.node[*].runtimeManager.rmMonitorInterval	   = .05 s
# This is the interval time that Runtime Manager expect beacon from particular vehicle
*.node[*].runtimeManager.expectedBeconInterval = ${beaconInterval}s

# Read Contract from input file, setting readContractsFromInputFile = false, will use the DEFAULT Contracts
*.node[*].runtimeManager.readContractsFromInputFile = true
*.node[*].runtimeManager.contractInputFilename      = "/home/ahad/plexe-veins-plexe-2.1/src/veins/modules/application/platooning/runtimeManager/input/contracts.txt"

# Setting write2file = true, will write any safety violation to the output txt file
*.node[*].runtimeManager.outputFilename	= "/home/ahad/plexe-veins-plexe-2.1/src/veins/modules/application/platooning/runtimeManager/output/output"
*.node[*].runtimeManager.write2file	    = true

# Beacon Packet loss
*.node[*].runtimeManager.nPacketLossPoor 	 = 2
*.node[*].runtimeManager.nPacketLossCritical = 3

# transition/action to be taken based on wifi connection. Use the DEFAULT Contracts
# The follwoing three are active only if readContractsFromInputFile = false
*.node[*].runtimeManager.upgradationEnabled = false 
*.node[*].runtimeManager.degradationEnabled = true
*.node[*].runtimeManager.gapControlEnabled  = true

########## violation check ##########
*.node[*].runtimeManager.minSafetyDistance = ${minSafetyDistance = 12}m
# min and max acceleration can be set as a simulaiton parameter in BBaseScenario.ned file
*.node[*].runtimeManager.maxDeceleration   = -8.0mpsps

# actions to be taken on transition if enabled actionOnTransition...SHOULD MAKE IT DEFAULT
#*.node[*].runtimeManager.actionOnTransitionEnabled = true

# default values . Set the value headway in 'Scenario common parameters' part
*.node[*].runtimeManager.accHeadwaytimeGap      = ${headway}s

########## cacc(ploeg) ##########
# default values (in case when wifi is ok). Set the value headway in 'Scenario common parameters' part
*.node[*].runtimeManager.ploegHeadwayTimeGap    = ${ploegH}s
# emergency case (in case of poor wifi quality)
# newPloegH = ploegHeadwayTimeGap  + ploegHeadwayTimeGap * emergencyPloegHeadwayTimeGapFactor
*.node[*].runtimeManager.emergencyPloegHeadwayTimeGapFactor = .25


########## cacc(path)(platoon) ##########
# Default minimum distance(in case wifi quality is ok). Set the value headway in 'Scenario common parameters' part
*.node[*].runtimeManager.caccConstantSpacing    = ${caccSpacing}m
# emergency case (For example in case of poor wifi quality we want to increase the by) 
# newSpacing = caccConstantSpacing + caccConstantSpacing * emergencyCaccConstantSpacingFactor
*.node[*].runtimeManager.emergencyCaccConstantSpacingFactor = .25


##########################################################
#                    Traffic manager                     #
##########################################################

**.traffic_type = "PlatoonsTrafficManager"
#insert platooning vehicles at time
**.traffic.platoonInsertTime = 1 s
#insert platooning vehicles with a speed of
**.traffic.platoonInsertSpeed = ${leaderSpeed}kmph
#insert nCars platooning vehicles
**.traffic.nCars = ${nCars}
#let platoonSize cars per platoon
**.traffic.platoonSize = ${platoonSize}
#use nLanes lanes
**.traffic.nLanes = ${nLanes}
#SUMO vtype for platooning vehicles
**.traffic.platooningVType = "vtypeauto"
#insert vehicles already at steady-state. distance depends on controller
**.traffic.platoonInsertDistance = ${2, 2, 5, 2, 15, 5 ! controller}m
# default
# **.traffic.platoonInsertHeadway = ${0.3, 1.2, 0, 0.5, 0.8, 0 ! controller}s
**.traffic.platoonInsertHeadway = ${0.3, 1.2, 1.0, 0.5, 0.8, 0 ! controller}s
**.traffic.platoonLeaderHeadway = ${leaderHeadway}s


#disable statistics recording for all other modules
**.scalar-recording = false
**.vector-recording = false

[Config Platooning]

*.manager.useGui = true

#use the base scenario
*.node[*].scenario_type = "SimpleScenario"

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.sca

[Config Sinusoidal]

*.manager.useGui = true

#use the sinusoidal scenario
*.node[*].scenario_type = "SinusoidalScenario"



#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.oscillationAmplitude = 10 kmph
*.node[*].scenario.startOscillating = 5 s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.sca

[Config Braking]

*.manager.useGui = true

#use the braking scenario
*.node[*].scenario_type = "BrakingScenario"

#make the leader decelerate with a certain deceleration
*.node[*].scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].scenario.brakingDeceleration = 8 mpsps
*.node[*].scenario.startBraking = 5 s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.sca

[Config PlatooningNoGui]
extends = Platooning

*.manager.useGui = false
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/Platooning_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/Platooning_${controller}_${headway}_${repetition}.sca

[Config SumoTraffic]
extends = Platooning

**.traffic_type = "SumoTrafficManager"
*.manager.configFile = "sumocfg/freeway-manual.sumo.cfg"

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.vec

[Config SinusoidalNoGui]
extends = Sinusoidal

*.manager.useGui = false
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/Sinusoidal_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/Sinusoidal_${controller}_${headway}_${repetition}.sca

[Config BrakingNoGui]
extends = Braking

*.manager.useGui = false
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/Braking_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/Braking_${controller}_${headway}_${repetition}.sca

[Config SumoTrafficNoGui]
extends = SumoTraffic

*.manager.useGui = false
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/SumoTraffic_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/SumoTraffic_${controller}_${headway}_${repetition}.sca